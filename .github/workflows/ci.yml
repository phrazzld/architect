name: Go CI

# Trigger events for the master branch and manual profiling
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      profile_tests:
        description: 'Run tests with profiling'
        required: false
        default: false
        type: boolean

# Jobs will be implemented incrementally in subsequent tasks
jobs:
  # Lint job will be implemented in subsequent tasks
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Go environment with comprehensive caching
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          cache: true
          cache-dependency-path: go.sum

      # Cache Go build outputs for faster builds
      - name: Cache Go build cache
        id: go-cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go-build-

      # Log cache usage for monitoring
      - name: Cache status report
        run: |
          echo "Go module cache hit: ${{ steps.go-cache.outputs.cache-hit == 'true' && 'yes' || 'no' }}"

      # Verify dependencies integrity
      - name: Verify dependencies
        run: go mod verify

      # Check code formatting
      - name: Check formatting
        run: |
          if [ -n "$(go fmt ./...)" ]; then
            echo "Code is not formatted, run 'go fmt ./...'"
            exit 1
          fi

      # Run static analysis
      - name: Run vet
        run: go vet ./...

      # Run comprehensive linting
      - name: Install and run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=5m

  # Test job for running Go tests
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    steps:
      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Go environment with comprehensive caching
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          cache: true
          cache-dependency-path: go.sum

      # Cache Go build outputs for faster builds
      - name: Cache Go build cache
        id: go-cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go-build-

      # Log cache usage for monitoring
      - name: Cache status report
        run: |
          echo "Go module cache hit: ${{ steps.go-cache.outputs.cache-hit == 'true' && 'yes' || 'no' }}"

      # Run integration tests with parallel execution
      - name: Run integration tests with parallel execution
        run: go test -v -race -short -parallel 4 ./internal/integration/...
        timeout-minutes: 5

      # Run E2E tests with parallel execution
      - name: Run E2E tests with parallel execution
        run: ./internal/e2e/run_e2e_tests.sh --verbose --short
        timeout-minutes: 8

      # Run other tests with race detection
      - name: Run other tests with race detection
        run: go test -v -race -short $(go list ./... | grep -v "github.com/phrazzld/architect/internal/integration" | grep -v "github.com/phrazzld/architect/internal/e2e")
        timeout-minutes: 8

      # Generate coverage report with short flag to skip long-running tests
      - name: Generate coverage report
        run: go test -short -coverprofile=coverage.out ./...
        timeout-minutes: 5

      # Display coverage summary
      - name: Display coverage summary
        run: go tool cover -func=coverage.out

      # Check coverage threshold
      - name: Check coverage threshold
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | tr -d '%')
          THRESHOLD=80
          COVERAGE_INT=${COVERAGE%.*}  # Remove decimal part for integer comparison
          echo "Code coverage: $COVERAGE%"
          if [ "$COVERAGE_INT" -lt "$THRESHOLD" ]; then
            echo "Code coverage is below the required threshold of $THRESHOLD% (actual: $COVERAGE%)"
            exit 1
          fi
          echo "Code coverage threshold check passed ($COVERAGE% >= $THRESHOLD%)"

  # Build job for building Go binary
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Go environment with comprehensive caching
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          cache: true
          cache-dependency-path: go.sum

      # Cache Go build outputs for faster builds
      - name: Cache Go build cache
        id: go-cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go-build-

      # Log cache usage for monitoring
      - name: Cache status report
        run: |
          echo "Go module cache hit: ${{ steps.go-cache.outputs.cache-hit == 'true' && 'yes' || 'no' }}"

      # Build the project
      - name: Build
        run: go build -v -ldflags="-s -w" -o architect
        timeout-minutes: 5

      # Upload binary as artifact
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: architect-binary
          path: architect
          retention-days: 7

  # Profiling job for analyzing test performance (runs on manual trigger)
  profile:
    name: Profile Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.profile_tests == 'true'
    needs: lint
    steps:
      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Go environment with comprehensive caching
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          cache: true
          cache-dependency-path: go.sum

      # Cache Go build outputs for faster builds
      - name: Cache Go build cache
        id: go-cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/go-build
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/*.go') }}
          restore-keys: |
            ${{ runner.os }}-go-build-

      # Log cache usage for monitoring
      - name: Cache status report
        run: |
          echo "Go module cache hit: ${{ steps.go-cache.outputs.cache-hit == 'true' && 'yes' || 'no' }}"

      # Run all tests with CPU profiling
      - name: Run tests with CPU profiling
        run: go test -v -cpuprofile=cpu.prof ./...
        timeout-minutes: 10

      # Run all tests with memory profiling
      - name: Run tests with memory profiling
        run: go test -v -memprofile=mem.prof ./...
        timeout-minutes: 10

      # Run all tests with block profiling
      - name: Run tests with block profiling
        run: go test -v -blockprofile=block.prof ./...
        timeout-minutes: 10

      # Upload profiling data as artifact
      - name: Upload profiling data
        uses: actions/upload-artifact@v4
        with:
          name: test-profiles
          path: |
            *.prof
          retention-days: 7
