name: Go CI

# Trigger events for the master branch
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

# Jobs will be implemented incrementally in subsequent tasks
jobs:
  # Lint job will be implemented in subsequent tasks
  lint:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Go environment
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          cache: true

      # Verify dependencies integrity
      - name: Verify dependencies
        run: go mod verify

      # Check code formatting
      - name: Check formatting
        run: |
          if [ -n "$(go fmt ./...)" ]; then
            echo "Code is not formatted, run 'go fmt ./...'"
            exit 1
          fi

      # Run static analysis
      - name: Run vet
        run: go vet ./...

      # Run comprehensive linting
      - name: Install and run golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest

  # Test job for running Go tests
  test:
    name: Test
    runs-on: ubuntu-latest
    needs: lint
    steps:
      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Go environment
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          cache: true
      
      # Run Go tests with race detection
      - name: Run tests with race detection
        run: go test -v -race ./...
        timeout-minutes: 15
        
      # Generate coverage report
      - name: Generate coverage report
        run: go test -coverprofile=coverage.out ./...
        
      # Display coverage summary
      - name: Display coverage summary
        run: go tool cover -func=coverage.out
        
      # Check coverage threshold
      - name: Check coverage threshold
        run: |
          COVERAGE=$(go tool cover -func=coverage.out | grep total | awk '{print $3}' | tr -d '%')
          THRESHOLD=80
          COVERAGE_INT=${COVERAGE%.*}  # Remove decimal part for integer comparison
          echo "Code coverage: $COVERAGE%"
          if [ "$COVERAGE_INT" -lt "$THRESHOLD" ]; then
            echo "Code coverage is below the required threshold of $THRESHOLD% (actual: $COVERAGE%)"
            exit 1
          fi
          echo "Code coverage threshold check passed ($COVERAGE% >= $THRESHOLD%)"

  # Build job for building Go binary
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test
    steps:
      # Checkout repository
      - name: Checkout code
        uses: actions/checkout@v4

      # Setup Go environment
      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          cache: true
      
      # Build the project
      - name: Build
        run: go build -v -ldflags="-s -w" -o architect
        timeout-minutes: 5
      
      # Artifact upload will be implemented in a subsequent task