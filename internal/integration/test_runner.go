// internal/integration/test_runner.go
package integration

import (
	"context"
	"fmt"

	"github.com/phrazzld/architect/internal/architect"
	"github.com/phrazzld/architect/internal/config"
	"github.com/phrazzld/architect/internal/gemini"
	"github.com/phrazzld/architect/internal/llm"
	"github.com/phrazzld/architect/internal/logutil"
)

// mockIntAPIService implements the architect.APIService interface for testing
// This type is actually used by running tests but wasn't detected by linting
type mockIntAPIService struct {
	logger        logutil.LoggerInterface
	mockClient    gemini.Client
	mockLLMClient llm.LLMClient
}

// InitClient returns the mock client instead of creating a real one
func (s *mockIntAPIService) InitClient(ctx context.Context, apiKey, modelName, apiEndpoint string) (gemini.Client, error) {
	// Always return the mock client, ignoring the API key, model name, and API endpoint
	return s.mockClient, nil
}

// InitLLMClient returns the mock LLM client instead of creating a real one
func (s *mockIntAPIService) InitLLMClient(ctx context.Context, apiKey, modelName, apiEndpoint string) (llm.LLMClient, error) {
	// If mockLLMClient is not nil, return it (for tests that explicitly set it)
	if s.mockLLMClient != nil {
		return s.mockLLMClient, nil
	}

	// Get mockClient GenerateContentFunc to check if it's configured to return an error
	if s.mockClient != nil && s.mockClient.(*gemini.MockClient).GenerateContentFunc != nil {
		// Try to generate content with a test prompt to see if it would return an error
		_, testErr := s.mockClient.GenerateContent(ctx, "test")
		if testErr != nil {
			// If the mockClient is configured to return an error, propagate that setup
			return nil, fmt.Errorf("simulated client initialization error: %v", testErr)
		}
	}

	// Otherwise create a simple mock implementation
	return &mockLLMClientForTesting{
		modelName: modelName,
	}, nil
}

// ProcessResponse processes the API response and extracts content
func (s *mockIntAPIService) ProcessResponse(result *gemini.GenerationResult) (string, error) {
	// Check for nil result
	if result == nil {
		return "", fmt.Errorf("result is nil")
	}

	// Check for empty content
	if result.Content == "" {
		return "", fmt.Errorf("empty content")
	}

	// Get the original content - with the new architecture, we just return the content
	// directly without any template processing
	return result.Content, nil
}

// IsEmptyResponseError checks if an error is related to empty API responses
func (s *mockIntAPIService) IsEmptyResponseError(err error) bool {
	if err == nil {
		return false
	}
	return err.Error() == "empty content" || err.Error() == "result is nil"
}

// IsSafetyBlockedError checks if an error is related to safety filters
func (s *mockIntAPIService) IsSafetyBlockedError(err error) bool {
	if err == nil {
		return false
	}
	return err.Error() == "content blocked by safety filters"
}

// GetErrorDetails extracts detailed information from an error
func (s *mockIntAPIService) GetErrorDetails(err error) string {
	if err == nil {
		return ""
	}
	return err.Error()
}

// ProcessLLMResponse processes the provider-agnostic API response and extracts content
func (s *mockIntAPIService) ProcessLLMResponse(result *llm.ProviderResult) (string, error) {
	// Check for nil result
	if result == nil {
		return "", fmt.Errorf("result is nil")
	}

	// Check for empty content
	if result.Content == "" {
		return "", fmt.Errorf("empty content")
	}

	// Return the content directly
	return result.Content, nil
}

// mockLLMClientForTesting is a simple implementation of the llm.LLMClient interface for testing
type mockLLMClientForTesting struct {
	modelName string
	content   string
}

// GenerateContent implements the LLMClient interface
func (m *mockLLMClientForTesting) GenerateContent(ctx context.Context, prompt string) (*llm.ProviderResult, error) {
	content := m.content
	if content == "" {
		// Use the same content as the SetupMockGeminiClient function to maintain consistency
		content = "# Test Generated Plan\n\nThis is a test plan generated by the mock client.\n\n## Details\n\nThe plan would normally contain implementation details based on the prompt."
	}
	return &llm.ProviderResult{
		Content:    content,
		TokenCount: int32(len(content) / 4), // Simple approximation
	}, nil
}

// CountTokens implements the LLMClient interface
func (m *mockLLMClientForTesting) CountTokens(ctx context.Context, prompt string) (*llm.ProviderTokenCount, error) {
	return &llm.ProviderTokenCount{
		Total: int32(len(prompt) / 4), // Simple approximation
	}, nil
}

// GetModelInfo implements the LLMClient interface
func (m *mockLLMClientForTesting) GetModelInfo(ctx context.Context) (*llm.ProviderModelInfo, error) {
	return &llm.ProviderModelInfo{
		Name:             m.modelName,
		InputTokenLimit:  32000,
		OutputTokenLimit: 8000,
	}, nil
}

// GetModelName implements the LLMClient interface
func (m *mockLLMClientForTesting) GetModelName() string {
	return m.modelName
}

// Close implements the LLMClient interface
func (m *mockLLMClientForTesting) Close() error {
	return nil
}

// RunTestWithConfig runs the architect application with the provided test config and environment
func RunTestWithConfig(
	ctx context.Context,
	testConfig *config.CliConfig,
	env *TestEnv,
) error {
	// Create a mock API service directly without modifying any global variables
	mockApiService := &mockIntAPIService{
		logger:     env.Logger,
		mockClient: env.MockClient,
	}

	// Run the architect application using Execute with the mock API service
	return architect.Execute(
		ctx,
		testConfig,
		env.Logger,
		env.AuditLogger,
		mockApiService,
	)
}
